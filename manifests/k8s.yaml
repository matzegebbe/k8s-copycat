apiVersion: v1
kind: Namespace
metadata:
  name: k8s-copycat
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-copycat-manager
  namespace: k8s-copycat
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-copycat-reader
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get","list","watch"]
  - apiGroups: ["apps"]
    resources: ["deployments","statefulsets"]
    verbs: ["get","list","watch"]
  - apiGroups: ["batch"]
    resources: ["jobs","cronjobs"]
    verbs: ["get","list","watch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get","list","watch","create","update","patch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create","patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-copycat-reader-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-copycat-reader
subjects:
  - kind: ServiceAccount
    name: k8s-copycat-manager
    namespace: k8s-copycat
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-copycat
  namespace: k8s-copycat
spec:
  replicas: 1
  selector:
    matchLabels: { app: k8s-copycat }
  template:
    metadata:
      labels: { app: k8s-copycat }
    spec:
      serviceAccountName: k8s-copycat-manager
      containers:
        - name: k8s-copycat
          volumeMounts:
            - name: k8s-copycat-config
              mountPath: /config
              readOnly: true
          image: ghcr.io/matzegebbe/k8s-copycat:main
          imagePullPolicy: IfNotPresent
          env:
            # choose one of: ecr | docker
            #- name: TARGET_KIND
            #  value: "docker"
            #- name: TARGET_REPO_PREFIX
            #  value: "backup"
            #- name: TARGET_REGISTRY
            #  value: "registry.test.svc.cluster.local:5000"
            #- name: TARGET_INSECURE
            #  value: "true"
            #- name: DRY_RUN
            #  value: "true"
            #- name: ECR_REPO_PREFIX
            #  value: "mirrors"
            #- name: ECR_CREATE_REPO
            #  value: "true"
            #- name: REGISTRY_REQUEST_TIMEOUT
            #  value: "2m"
            #- name: DOCKERHUB_USERNAME
            #  valueFrom: { secretKeyRef: { name: registry-creds, key: dockerhub-username } }
            #- name: DOCKERHUB_PASSWORD
            #  valueFrom: { secretKeyRef: { name: registry-creds, key: dockerhub-password } }
            #- name: GHCR_TOKEN
            #  valueFrom: { secretKeyRef: { name: registry-creds, key: ghcr-token } }
            # include namespaces: "*" or "default,prod"
            #- name: CONFIG_PATH
            #  value: "/config/config.yaml"
            - name: INCLUDE_NAMESPACES
              value: "test"
            #- name: SKIP_NAMESPACES
            #  value: "kube-system,copycat"
            #- name: SKIP_DEPLOYMENTS
            #  value: "copycat"
            #- name: SKIP_STATEFULSETS
            #  value: "redis"
            #- name: SKIP_JOBS
            #  value: "backup"
            #- name: SKIP_CRONJOBS
            #  value: "nightly"
            #- name: SKIP_PODS
            #  value: "custom-pod"
          resources:
            requests: { cpu: 50m, memory: 64Mi }
            limits:   { cpu: 500m, memory: 256Mi }
          livenessProbe:
            httpGet: { path: /healthz, port: 8081 }
            initialDelaySeconds: 10
          readinessProbe:
            httpGet: { path: /readyz, port: 8081 }
            initialDelaySeconds: 5
      volumes:
        - name: k8s-copycat-config
          configMap:
            name: k8s-copycat-config
            items:
              - key: config.yaml
                path: config.yaml
#         - name: TARGET_KIND
#           value: "docker"
#         - name: TARGET_REGISTRY
#           value: "ghcr.io"
#         - name: TARGET_REPO_PREFIX
#           value: "mirrors"
#         - name: TARGET_INSECURE
#           value: "true"
#         - name: TARGET_USERNAME
#           valueFrom: { secretKeyRef: { name: registry-creds, key: username } }
#         - name: TARGET_PASSWORD
#           valueFrom: { secretKeyRef: { name: registry-creds, key: password } }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8s-copycat-config
  namespace: k8s-copycat
data:
  config.yaml: |
    targetKind: docker     # ecr | docker
    logLevel: debug         # debug | info | warn | error | dpanic | panic | fatal
    dryRun: false
    includeNamespaces: ["test"]
    # skipNamespaces: ["kube-system"]
    # skipNames:
    #   deployments: ["copycat"]
    #   statefulSets: ["redis"]
    #   jobs: ["backup"]
    #   cronJobs: ["nightly"]
    #   pods: ["custom-pod"]
    requestTimeout: 2m
    #ecr:
    #  accountID: "123456789012"
    #  region: "eu-central-1"
    #  repoPrefix: "mirrors"
    #  createRepo: true
    #  lifecyclePolicy: |
    #    {
    #      "rules": [
    #        {
    #          "rulePriority": 1,
    #          "description": "Retain only the five most recent images",
    #          "selection": {
    #            "tagStatus": "any",
    #            "countType": "imageCountMoreThan",
    #            "countNumber": 5
    #          },
    #          "action": { "type": "expire" }
    #        }
    #      ]
    #    }
    docker:
      registry: "registry.test.svc.cluster.local:5000"
      repoPrefix: "mirrors"
      insecure: true
    registryCredentials:
      - registry: registry-1.docker.io
        usernameEnv: DOCKERHUB_USERNAME
        passwordEnv: DOCKERHUB_PASSWORD
      - registry: ghcr.io
        tokenEnv: GHCR_TOKEN
